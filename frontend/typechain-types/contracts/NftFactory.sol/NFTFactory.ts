/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface NFTFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createNFTContract"
      | "deployedNFTs"
      | "getDeployedNFTs"
      | "marketplaceAddress"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "NFTContractCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "createNFTContract",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployedNFTs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployedNFTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketplaceAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createNFTContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployedNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketplaceAddress",
    data: BytesLike
  ): Result;
}

export namespace NFTContractCreatedEvent {
  export type InputTuple = [
    nftAddress: AddressLike,
    name: string,
    symbol: string,
    owner: AddressLike
  ];
  export type OutputTuple = [
    nftAddress: string,
    name: string,
    symbol: string,
    owner: string
  ];
  export interface OutputObject {
    nftAddress: string;
    name: string;
    symbol: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NFTFactory extends BaseContract {
  connect(runner?: ContractRunner | null): NFTFactory;
  waitForDeployment(): Promise<this>;

  interface: NFTFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createNFTContract: TypedContractMethod<
    [name: string, symbol: string, collectionImageUri: string],
    [string],
    "nonpayable"
  >;

  deployedNFTs: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getDeployedNFTs: TypedContractMethod<[], [string[]], "view">;

  marketplaceAddress: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createNFTContract"
  ): TypedContractMethod<
    [name: string, symbol: string, collectionImageUri: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployedNFTs"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getDeployedNFTs"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "marketplaceAddress"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "NFTContractCreated"
  ): TypedContractEvent<
    NFTContractCreatedEvent.InputTuple,
    NFTContractCreatedEvent.OutputTuple,
    NFTContractCreatedEvent.OutputObject
  >;

  filters: {
    "NFTContractCreated(address,string,string,address)": TypedContractEvent<
      NFTContractCreatedEvent.InputTuple,
      NFTContractCreatedEvent.OutputTuple,
      NFTContractCreatedEvent.OutputObject
    >;
    NFTContractCreated: TypedContractEvent<
      NFTContractCreatedEvent.InputTuple,
      NFTContractCreatedEvent.OutputTuple,
      NFTContractCreatedEvent.OutputObject
    >;
  };
}
