/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace MarketplaceRegistry {
  export type MarketItemStruct = {
    marketItemId: BigNumberish;
    nftContractAddress: AddressLike;
    tokenId: BigNumberish;
    creator: AddressLike;
    seller: AddressLike;
    owner: AddressLike;
    price: BigNumberish;
    sold: boolean;
    canceled: boolean;
    list: boolean;
  };

  export type MarketItemStructOutput = [
    marketItemId: bigint,
    nftContractAddress: string,
    tokenId: bigint,
    creator: string,
    seller: string,
    owner: string,
    price: bigint,
    sold: boolean,
    canceled: boolean,
    list: boolean
  ] & {
    marketItemId: bigint;
    nftContractAddress: string;
    tokenId: bigint;
    creator: string;
    seller: string;
    owner: string;
    price: bigint;
    sold: boolean;
    canceled: boolean;
    list: boolean;
  };
}

export interface MarketplaceRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelMarketItem"
      | "createMarketItem"
      | "createMarketSale"
      | "createUnlistedMarketItem"
      | "getAllContractsAddress"
      | "getItemId"
      | "getLatestMarketItemByTokenId"
      | "getListingFee"
      | "listMarketItem"
      | "retrieveAllMarketItems"
      | "retrieveByMarketplaceTokenId"
      | "retrieveMarketItemByCollectionAndTokenId"
      | "retrieveMarketItemyByMarketId"
      | "unlistMarketItem"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MarketItemCreated"
      | "MarketItemListed"
      | "MarketItemSold"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelMarketItem",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarketItem",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarketSale",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createUnlistedMarketItem",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllContractsAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getItemId",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestMarketItemByTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listMarketItem",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveAllMarketItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveByMarketplaceTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveMarketItemByCollectionAndTokenId",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveMarketItemyByMarketId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlistMarketItem",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarketSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createUnlistedMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllContractsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getItemId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLatestMarketItemByTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveAllMarketItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveByMarketplaceTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveMarketItemByCollectionAndTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveMarketItemyByMarketId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlistMarketItem",
    data: BytesLike
  ): Result;
}

export namespace MarketItemCreatedEvent {
  export type InputTuple = [
    marketItemId: BigNumberish,
    nftContract: AddressLike,
    tokenId: BigNumberish,
    creator: AddressLike,
    seller: AddressLike,
    owner: AddressLike,
    price: BigNumberish,
    sold: boolean,
    canceled: boolean,
    list: boolean
  ];
  export type OutputTuple = [
    marketItemId: bigint,
    nftContract: string,
    tokenId: bigint,
    creator: string,
    seller: string,
    owner: string,
    price: bigint,
    sold: boolean,
    canceled: boolean,
    list: boolean
  ];
  export interface OutputObject {
    marketItemId: bigint;
    nftContract: string;
    tokenId: bigint;
    creator: string;
    seller: string;
    owner: string;
    price: bigint;
    sold: boolean;
    canceled: boolean;
    list: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketItemListedEvent {
  export type InputTuple = [
    marketItemId: BigNumberish,
    nftContract: AddressLike,
    tokenId: BigNumberish,
    creator: AddressLike,
    seller: AddressLike,
    owner: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    marketItemId: bigint,
    nftContract: string,
    tokenId: bigint,
    creator: string,
    seller: string,
    owner: string,
    price: bigint
  ];
  export interface OutputObject {
    marketItemId: bigint;
    nftContract: string;
    tokenId: bigint;
    creator: string;
    seller: string;
    owner: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketItemSoldEvent {
  export type InputTuple = [
    marketItemId: BigNumberish,
    nftContract: AddressLike,
    tokenId: BigNumberish,
    seller: AddressLike,
    owner: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    marketItemId: bigint,
    nftContract: string,
    tokenId: bigint,
    seller: string,
    owner: string,
    price: bigint
  ];
  export interface OutputObject {
    marketItemId: bigint;
    nftContract: string;
    tokenId: bigint;
    seller: string;
    owner: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MarketplaceRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): MarketplaceRegistry;
  waitForDeployment(): Promise<this>;

  interface: MarketplaceRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelMarketItem: TypedContractMethod<
    [nftContractAddress: AddressLike, marketItemId: BigNumberish],
    [void],
    "payable"
  >;

  createMarketItem: TypedContractMethod<
    [
      nftContractAddress: AddressLike,
      tokenId: BigNumberish,
      price: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  createMarketSale: TypedContractMethod<
    [nftContractAddress: AddressLike, marketItemId: BigNumberish],
    [void],
    "payable"
  >;

  createUnlistedMarketItem: TypedContractMethod<
    [nftContractAddress: AddressLike, tokenId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getAllContractsAddress: TypedContractMethod<[], [string[]], "view">;

  getItemId: TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish],
    [[bigint, boolean]],
    "view"
  >;

  getLatestMarketItemByTokenId: TypedContractMethod<
    [tokenId: BigNumberish],
    [[MarketplaceRegistry.MarketItemStructOutput, boolean]],
    "view"
  >;

  getListingFee: TypedContractMethod<[], [bigint], "view">;

  listMarketItem: TypedContractMethod<
    [marketItemId: BigNumberish, price: BigNumberish],
    [MarketplaceRegistry.MarketItemStructOutput],
    "payable"
  >;

  retrieveAllMarketItems: TypedContractMethod<
    [],
    [MarketplaceRegistry.MarketItemStructOutput[]],
    "view"
  >;

  retrieveByMarketplaceTokenId: TypedContractMethod<
    [marketItemId: BigNumberish],
    [MarketplaceRegistry.MarketItemStructOutput],
    "view"
  >;

  retrieveMarketItemByCollectionAndTokenId: TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish],
    [[MarketplaceRegistry.MarketItemStructOutput, boolean]],
    "view"
  >;

  retrieveMarketItemyByMarketId: TypedContractMethod<
    [tokenId: BigNumberish],
    [MarketplaceRegistry.MarketItemStructOutput],
    "view"
  >;

  unlistMarketItem: TypedContractMethod<
    [nftContractAddress: AddressLike, marketItemId: BigNumberish],
    [MarketplaceRegistry.MarketItemStructOutput],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelMarketItem"
  ): TypedContractMethod<
    [nftContractAddress: AddressLike, marketItemId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createMarketItem"
  ): TypedContractMethod<
    [
      nftContractAddress: AddressLike,
      tokenId: BigNumberish,
      price: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createMarketSale"
  ): TypedContractMethod<
    [nftContractAddress: AddressLike, marketItemId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createUnlistedMarketItem"
  ): TypedContractMethod<
    [nftContractAddress: AddressLike, tokenId: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllContractsAddress"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getItemId"
  ): TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish],
    [[bigint, boolean]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLatestMarketItemByTokenId"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [[MarketplaceRegistry.MarketItemStructOutput, boolean]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getListingFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "listMarketItem"
  ): TypedContractMethod<
    [marketItemId: BigNumberish, price: BigNumberish],
    [MarketplaceRegistry.MarketItemStructOutput],
    "payable"
  >;
  getFunction(
    nameOrSignature: "retrieveAllMarketItems"
  ): TypedContractMethod<
    [],
    [MarketplaceRegistry.MarketItemStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "retrieveByMarketplaceTokenId"
  ): TypedContractMethod<
    [marketItemId: BigNumberish],
    [MarketplaceRegistry.MarketItemStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "retrieveMarketItemByCollectionAndTokenId"
  ): TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish],
    [[MarketplaceRegistry.MarketItemStructOutput, boolean]],
    "view"
  >;
  getFunction(
    nameOrSignature: "retrieveMarketItemyByMarketId"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [MarketplaceRegistry.MarketItemStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "unlistMarketItem"
  ): TypedContractMethod<
    [nftContractAddress: AddressLike, marketItemId: BigNumberish],
    [MarketplaceRegistry.MarketItemStructOutput],
    "payable"
  >;

  getEvent(
    key: "MarketItemCreated"
  ): TypedContractEvent<
    MarketItemCreatedEvent.InputTuple,
    MarketItemCreatedEvent.OutputTuple,
    MarketItemCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MarketItemListed"
  ): TypedContractEvent<
    MarketItemListedEvent.InputTuple,
    MarketItemListedEvent.OutputTuple,
    MarketItemListedEvent.OutputObject
  >;
  getEvent(
    key: "MarketItemSold"
  ): TypedContractEvent<
    MarketItemSoldEvent.InputTuple,
    MarketItemSoldEvent.OutputTuple,
    MarketItemSoldEvent.OutputObject
  >;

  filters: {
    "MarketItemCreated(uint256,address,uint256,address,address,address,uint256,bool,bool,bool)": TypedContractEvent<
      MarketItemCreatedEvent.InputTuple,
      MarketItemCreatedEvent.OutputTuple,
      MarketItemCreatedEvent.OutputObject
    >;
    MarketItemCreated: TypedContractEvent<
      MarketItemCreatedEvent.InputTuple,
      MarketItemCreatedEvent.OutputTuple,
      MarketItemCreatedEvent.OutputObject
    >;

    "MarketItemListed(uint256,address,uint256,address,address,address,uint256)": TypedContractEvent<
      MarketItemListedEvent.InputTuple,
      MarketItemListedEvent.OutputTuple,
      MarketItemListedEvent.OutputObject
    >;
    MarketItemListed: TypedContractEvent<
      MarketItemListedEvent.InputTuple,
      MarketItemListedEvent.OutputTuple,
      MarketItemListedEvent.OutputObject
    >;

    "MarketItemSold(uint256,address,uint256,address,address,uint256)": TypedContractEvent<
      MarketItemSoldEvent.InputTuple,
      MarketItemSoldEvent.OutputTuple,
      MarketItemSoldEvent.OutputObject
    >;
    MarketItemSold: TypedContractEvent<
      MarketItemSoldEvent.InputTuple,
      MarketItemSoldEvent.OutputTuple,
      MarketItemSoldEvent.OutputObject
    >;
  };
}
